function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

document.addEventListener("DOMContentLoaded", function () {
  var _$$slick;

  if (document.querySelectorAll(".indexpage").length > 0) {
    var scrollDown = function scrollDown() {
      var windowCoords = document.documentElement.clientHeight;

      (function scroll() {
        if (window.pageYOffset < windowCoords) {
          window.scrollBy(0, 10);
          setTimeout(scroll, 0);
        }

        if (window.pageYOffset > windowCoords) {
          window.scrollTo(0, windowCoords);
        }
      })();
    };

    var btnScrollDown = document.querySelector('.header .wrapper .arrow');
    btnScrollDown.addEventListener('click', scrollDown);
  }

  $(".cards-slider").slick((_$$slick = {
    dots: false,
    slidesToShow: 1,
    rows: 3,
    adaptiveHeight: true,
    arrows: false,
    // fade: true,
    autoplay: true
  }, _defineProperty(_$$slick, "autoplay", true), _defineProperty(_$$slick, "autoplaySpeed", 1500), _defineProperty(_$$slick, "cssEase", 'linear'), _$$slick));
  $('.cards-slider').on('afterChange', function (event, slick, currentSlide, nextSlide) {
    ScrollReveal().sync();
  });
  var delay = 100,
      duration = 600; // ScrollReveal().reveal('.parent,.header .logo,.header .icons,.header .arrow'); 

  ScrollReveal({
    reset: true
  }).reveal('.header .logo,.header .icons,.header .arrow,.navigation-panel .button,.start-game,.block-with-rools', {
    delay: delay,
    duration: duration
  });
});

function isAnyPartOfElementInViewport(el) {
  var rect = el.getBoundingClientRect();
  var windowHeight = window.innerHeight || document.documentElement.clientHeight;
  var windowWidth = window.innerWidth || document.documentElement.clientWidth; // http://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap

  var vertInView = rect.top <= windowHeight && rect.top + rect.height >= 0;
  var horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;
  return vertInView && horInView;
}
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

document.addEventListener("DOMContentLoaded", function () {
  if (document.querySelector(".indexpage")) {
    document.querySelector(".button").classList.add("active-button");
    document.querySelector(".block-with-employee").style.display = "flex";
    document.querySelectorAll(".block-with-employee").forEach(function (e, i) {
      if (i == 0) {
        e.style.display = "flex";
      } else {
        e.style.display = "none";
      }
    });
  }
});

function openSelection(evt) {
  // $('.block-with-employee').slick('unslick');
  // $('#Главная').slick('reinit');
  var blockThatNeedToOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "block-with-employee";
  var button = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "active-button";
  var displayStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "flex";
  var i;
  type = event.target.getAttribute("data-categories");

  if (type != "Главная") {
    $(".cards-slider").slick("unslick");
  }

  document.querySelector(".".concat(button)).classList.remove("".concat(button));
  if (evt.target.classList.contains("".concat(button))) evt.target.classList.remove("".concat(button));else evt.target.classList.add("".concat(button));
  var x = document.getElementsByClassName("".concat(blockThatNeedToOpen));

  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }

  console.log(!event.target.classList.contains("slick-slider"));
  document.getElementById(type).style.display = displayStyle;

  if (type == "Главная") {
    if (event.target.classList.contains("slick-slider")) {
      setTimeout(function () {
        var _$$slick;

        $(".cards-slider").slick((_$$slick = {
          dots: false,
          slidesToShow: 1,
          rows: 3,
          adaptiveHeight: true,
          arrows: false,
          fade: true,
          autoplay: true
        }, _defineProperty(_$$slick, "autoplay", true), _defineProperty(_$$slick, "autoplaySpeed", 1500), _defineProperty(_$$slick, "cssEase", 'linear'), _$$slick));
      }, 100);
    } else {
      return;
    }
  }

  ScrollReveal().sync();
}